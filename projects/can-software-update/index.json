{"data":{"title":"Controller Area Network Software Update","date":"2021-10-06 13:11:47 -0400 EDT","year":"2021","draft":"false","featured":"true","image":"<no value>","permalink":"https://www.jackgreenberg.co/projects/can-software-update/index.json","content":"\nOn Olin's Formula SAE team, I built a [vehicle software update\nsystem](https://github.com/jack-greenberg/btldr) consisting\nof a custom bootloader and an application protocol that uses the CAN protocol\nfor its physical and data-link layer.\n\n\u003c!--more--\u003e\n\n{{\u003cimg\n    src=\"images/state.png\"\n    caption=\"State diagram for the software update system\"\n\u003e}}\n\n## Features\n\nThe system, referred to as _btldr_, allows engineers to update any ECU on the\nvehicle without physical access to the hardware. The bootloader is responsible\nfor initializing the CAN protocol stack and reacting to the commands issued by\nthe host. It also handles image validation by performing a cyclic-redunancy\ncheck and refusing to run the image if corruption has occured.\n\nThe entire bootloader takes up less than 4 kilobytes of space on the\ndevice, making it light-weight while still maintaining robustness.\n\n## Application Protocol\n\nThe _btldr_ utilizes a custom protocol for initializing and conducting the\nupdate. There are 4 different message types:\n\n* __Ping__: Checks device reachability, current firmware version, and updater\n  compatibility\n* __Request Update__: Initialize an update session for a particular ECU\n* __Data__: Contains a chunk of the binary being flashed\n* __Reset__: Instructs the device to check the validity of the image and begin\n  executing if it is valid\n\nEach of these commands has an associated response message that is sent by the\ntarget device to acknowledge and/or provide additional data to the host.\n\n## Bootloader\n\nThe bootloader portion of the system is a 4 kilobyte program that executes\nwhenever the device resets. It first checks an EEPROM memory bank that is shared\nwith the application section to see if an update has been requested, and, if so,\ninitializes the protocol stack.\n\nIt then listens for specific CAN messages and acts according to the commands it\nreceives.\n\n## Motivation\n\nHistorically on the Formula team, ECU firmware updates required a group of\nengineers to open up various enclosures and unplug PCBs from around the car and\nmanually recompile and flash code using a programming dongle. This is highly\ninefficient and costs valuable time to the engineers. The motivation behind this\nproject is to provide a streamlined method for updating vehicle firmware that\nonly requires a single point of physical access to the car.\n\n## Future Steps\n\nMany automotive OEMs are recognizing a need for over-the-air (OTA) software\nupdates, especially as more and more embedded systems for electric vehicles are\nbeing introduced for things like safety and autonomy. As a learning experiment,\nI hope to integrate a Wi-Fi-based OTA updater component to the vehicle, which\nwould allow it to be updated remotely.\n\nWith the addition of remote access comes the necessity for security. An\nunsecured software update mechanism could allow malicious actors to introduce\ndangerous code to a vehicle. In addition to wireless access, I also hope to\ncreate a secure software update system which uses code-signing to verify the\nintegrity and origin of the code.\n\n---\n\nDetailed project documentation---including deep-dives into the different\ntechnologies and methods used to build the tool---can be found\n[here](https://docs.olinelectricmotorsports.com/share/01350eeb-8337-4c31-98f8-7eeb97936000).\n"}}